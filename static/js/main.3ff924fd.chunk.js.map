{"version":3,"sources":["components/Frase.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorFrase","styled","div","Frase","frase","Object","keys","length","quote","author","Contenedor","Boton","button","App","useState","guardarFrase","consultarAPI","a","fetch","api","json","useEffect","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"27BAGA,IAAMA,EAAkBC,IAAOC,IAAV,KA8CNC,EAXD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEZ,OAAiC,IAA9BC,OAAOC,KAAKF,GAAOG,OAAqB,KAEvC,kBAACP,EAAD,KACA,4BAAKI,EAAMI,OACX,gCAAMJ,EAAMK,U,4jBCxCpB,IAAMC,EAAaT,IAAOC,IAAV,KAOVS,EAAQV,IAAOW,OAAV,KA6CIC,MA5Bf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENV,EAFM,KAECW,EAFD,KAIPC,EAAY,uCAAG,8BAAAC,EAAA,sEACDC,MAAM,uDADL,cACbC,EADa,gBAECA,EAAIC,OAFL,OAEbhB,EAFa,OAGnBW,EAAaX,EAAM,IAHA,2CAAH,qDAUlB,OAJAiB,qBAAU,WACRL,MACC,IAGD,kBAACN,EAAD,KACE,kBAAC,EAAD,CACAN,MAAOA,IAET,kBAACO,EAAD,CACAW,QAAY,kBAAMN,MADlB,mBCnCgBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ff924fd.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ContenedorFrase = styled.div`\npadding: 3rem;\nborder-radius:.5rem;\nbackground-color:#fff;\nmax-width:800px;\n\n@media (min-width: 992px){\nmargin-top:10rem;\n}\n\nh2{\n    font-family: Arial, Helvetica, sans-serif;\n    text-align:center;\n    position:relative;\n    padding-left:4rem;\n\n    &::before{\n        content:open-quote;\n        font-size:9rem;\n        color:black;\n        position:absolute;\n        left: -1rem;\n        top: -3rem;\n    }\n}\np {\n        font-family:Verdana, Geneva, Tahoma, sans-serif;\n        font-size: 1rem;\n        font-weight:bold;\n        text-align:right;\n        color:#666;\n        margin-top:2rem;\n    }\n`;\n\nconst Frase = ({frase}) => {\n\n    if(Object.keys(frase).length === 0) return null;\n    return ( \n        <ContenedorFrase>\n        <h2>{frase.quote}</h2>\n        <p>- {frase.author}</p>\n        </ContenedorFrase>\n     );\n}\n \nexport default Frase;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Frase from './components/Frase';\n\nconst Contenedor = styled.div`\ndisplay:flex;\nalign-items:center;\npadding-top:5em;\nflex-direction:column;\n`;\n\nconst Boton = styled.button`\nbackground: -webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\nbackground-size: 302px;\nfont-family: Arial, Helvetica, sans-serif;\ncolor: #fff;\nmargin-top:3rem;\npadding: 1rem 3rem;\nfont-size: 2rem;\nborder: 2px solid black;\ntransition: background-size 0.8s ease;\n\n:hover{\n  cursor:pointer;\n  background-size:400px;\n}\n`;\n\nfunction App() {\n\n  const [frase, guardarFrase] = useState({});\n\n  const consultarAPI = async () => {\n    const api = await fetch('https://breaking-bad-quotes.herokuapp.com/v1/quotes')\n    const frase = await api.json();\n    guardarFrase(frase[0])\n  }\n\n  useEffect(() => {\n    consultarAPI();\n  }, [])\n\n  return (\n    <Contenedor>\n      <Frase\n      frase={frase}\n      />\n    <Boton\n    onClick = { () => consultarAPI() }\n    >\n      Obtener Frase\n    </Boton>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}